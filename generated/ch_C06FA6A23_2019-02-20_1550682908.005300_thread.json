{
  "id": "ch_C06FA6A23_2019-02-20_1550682908.005300_thread",
  "type": "channel",
  "channel_name": "discuss-engineering",
  "conversation_type": "thread",
  "participants": [
    "Kerry",
    "Ted",
    "Chetan",
    "Anant"
  ],
  "messages": [
    {
      "sender": "Kerry",
      "user_id": "UCX3VGDJR",
      "message": "python’s `regex` is very powerful… wish there’s a javascript regex lib that lets you do fuzzy match :confused:",
      "time": "09:15",
      "timestamp": "1550682908.005300",
      "is_reply": false
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "isn’t fuzzy matching the point of regex? i confused — what does this mean?",
      "time": "09:18",
      "timestamp": "1550683104.005600",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "Adding a global error tolerance",
      "time": "09:20",
      "timestamp": "1550683242.005800",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "e.g., “any one of the characters in the match sequence can be off”",
      "time": "09:20",
      "timestamp": "1550683252.006100",
      "is_reply": true
    },
    {
      "sender": "Kerry",
      "user_id": "UCX3VGDJR",
      "message": "hmm, i thought regex is always an exact match. fuzzy match lets you provide a regex pattern and an error tolerance number",
      "time": "09:21",
      "timestamp": "1550683276.006300",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "If regex is a state machine, `errtol=n` is, I believe, equivalent to multiplying the number of states in the state machine by `n`",
      "time": "09:21",
      "timestamp": "1550683279.006500",
      "is_reply": true
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "aah kerry the regex library in python that we use (which isn’t python’s standard regex lib)  has the fancy features ted talked about.",
      "time": "09:23",
      "timestamp": "1550683428.006800",
      "is_reply": true
    },
    {
      "sender": "Kerry",
      "user_id": "UCX3VGDJR",
      "message": "@Chetan yes - `regex` not `re` :slightly_smiling_face:",
      "time": "09:24",
      "timestamp": "1550683445.007100",
      "is_reply": true
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "but yes see python is much better than javascript @Kerry :slightly_smiling_face:",
      "time": "09:24",
      "timestamp": "1550683448.007300",
      "is_reply": true
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "aaah my bad i misunderstood  :slightly_smiling_face:",
      "time": "09:24",
      "timestamp": "1550683458.007500",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "Ok imma throw down for Javascript here :slightly_smiling_face:",
      "time": "09:27",
      "timestamp": "1550683632.007700",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "<Kanye West voice>\nTYPE SCRIPT IS THE BEST LANGUAGE OF ALL TIME",
      "time": "09:27",
      "timestamp": "1550683643.007900",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "Python’s `[]` operator is pretty rad though.",
      "time": "09:28",
      "timestamp": "1550683690.008100",
      "is_reply": true
    },
    {
      "sender": "Kerry",
      "user_id": "UCX3VGDJR",
      "message": "@Ted there are js libraries that implement Levenshtein distance which is probably how python `regex` implemented the fuzzy search (e.g., https://www.npmjs.com/package/js-levenshtein). But seems that you can only compare two strings instead of a regex pattern & a string :confused:",
      "time": "09:30",
      "timestamp": "1550683800.008300",
      "is_reply": true
    },
    {
      "sender": "Kerry",
      "user_id": "UCX3VGDJR",
      "message": "i guess i can always call a python udf through api from the frontend, but it also slows down the app :confused:",
      "time": "09:31",
      "timestamp": "1550683897.008700",
      "is_reply": true
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "… what do you do without the `[]` operator? `.get()` like a peasant? @Ted",
      "time": "09:31",
      "timestamp": "1550683904.008900",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "Sir, I see you do taunt me inside a thread where I can not retaliate with memes sir!",
      "time": "09:32",
      "timestamp": "1550683942.009100",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "(for real though `var[start:end, start:end]` is a pretty amazing data access shorthand)",
      "time": "09:32",
      "timestamp": "1550683978.009300",
      "is_reply": true
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "nope. you’ll have to put the extra work to upload them as an emoji and then use that :stuck_out_tongue:",
      "time": "09:33",
      "timestamp": "1550683984.009500",
      "is_reply": true
    },
    {
      "sender": "Chetan",
      "user_id": "UE3TJAR9U",
      "message": "aaad yea that makes sense. definitely not common and beautiful to have.",
      "time": "09:33",
      "timestamp": "1550683998.009700",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "Like, the way numpy extends python is a work of art",
      "time": "09:33",
      "timestamp": "1550684003.009900",
      "is_reply": true
    },
    {
      "sender": "Anant",
      "user_id": "U0U100MNZ",
      "message": "we use that inside our scan function",
      "time": "10:28",
      "timestamp": "1550687290.010200",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "@Kerry sorry, missed your comment above, but agree—I think the diff is that lev dist is between fixed (a,b) whereas error tolerant Regex is a search (r, *). I think backend might be the only way :( which is unfortunate for latency",
      "time": "11:20",
      "timestamp": "1550690437.012700",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "But on the other hand, having a single unified code path at both development and execution time is good for robustness",
      "time": "11:21",
      "timestamp": "1550690470.013700",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "So relying on backend isn’t all bad",
      "time": "11:21",
      "timestamp": "1550690479.014200",
      "is_reply": true
    },
    {
      "sender": "Ted",
      "user_id": "UAEM2MEGJ",
      "message": "(Development and execution from perspective of Instabase user, not us)",
      "time": "11:21",
      "timestamp": "1550690508.015000",
      "is_reply": true
    },
    {
      "sender": "Kerry",
      "user_id": "UCX3VGDJR",
      "message": "yeah i agree",
      "time": "11:22",
      "timestamp": "1550690564.015200",
      "is_reply": true
    }
  ],
  "metadata": {
    "channel_id": "C06FA6A23",
    "channel_name": "discuss-engineering",
    "date_file": "2019-02-20.json",
    "message_count": 27,
    "start_time": "1550682908.005300",
    "end_time": "1550690564.015200",
    "is_thread": true
  }
}