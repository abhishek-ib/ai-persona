{
  "id": "ch_C06FA6A23_2020-03-24_1585059236.051800_conversation",
  "type": "channel",
  "channel_name": "discuss-engineering",
  "conversation_type": "conversation",
  "participants": [
    "Andrey",
    "will"
  ],
  "messages": [
    {
      "sender": "will",
      "user_id": "UJUJC82AG",
      "message": "I don’t think you can inherit A from C without defining it as a class and inheriting that way. Inheriting from `NamedTuple` is apparently a bit tricky as well,",
      "time": "07:13",
      "timestamp": "1585059236.051800",
      "is_reply": false
    },
    {
      "sender": "will",
      "user_id": "UJUJC82AG",
      "message": "For example:\n```from typing import NamedTuple\n\nclass C(NamedTuple):\n\tname: str\n\nclass B(C):\n\tb_value: int\n\nclass A(C):\n\ta_value: int\n\na = A('hello!')\nb = B('goodbye!')\ndef f(c: C):\n    print(c.name)\nf(a)\nf(b)```",
      "time": "07:15",
      "timestamp": "1585059327.052600",
      "is_reply": false
    },
    {
      "sender": "will",
      "user_id": "UJUJC82AG",
      "message": "You can’t assign a/b_values in B or C because the new attributes from the subclass aren’t available without reimplementing  the constructor, which at that point it seems like you would just throw it in a class anyway?",
      "time": "07:17",
      "timestamp": "1585059423.053800",
      "is_reply": false
    },
    {
      "sender": "will",
      "user_id": "UJUJC82AG",
      "message": "I’m definitely not a python expert, but especially given the example you sent I would lean toward just making small classes.",
      "time": "07:17",
      "timestamp": "1585059474.054500",
      "is_reply": false
    },
    {
      "sender": "Andrey",
      "user_id": "UTDAKGB8U",
      "message": "I want pass-by-value semantics",
      "time": "07:18",
      "timestamp": "1585059484.054900",
      "is_reply": false
    }
  ],
  "metadata": {
    "channel_id": "C06FA6A23",
    "channel_name": "discuss-engineering",
    "date_file": "2020-03-24.json",
    "message_count": 5,
    "start_time": "1585059236.051800",
    "end_time": "1585059484.054900",
    "is_thread": false
  }
}