{
  "id": "ch_C06FA6A23_2019-06-24_1561384661.435300_thread",
  "type": "channel",
  "channel_name": "discuss-engineering",
  "conversation_type": "thread",
  "participants": [
    "dlluncor",
    "lydia"
  ],
  "messages": [
    {
      "sender": "lydia",
      "user_id": "UJK4LKYSJ",
      "message": "I've always logged using `logging.info (http://logging.info)('this is an error %s', error)`, but i notice a lot of code uses `logging.info (http://logging.info)('this is an error {}'.format(error))`. https://lincolnloop.com/blog/django-logging-right-way/ the first section says the benefit of the first approach is that variable substitution won't occur if the log isn't used. I've also previously used it with sentry, and they can better group log messages if you use `%s` instead of format. Do we have a preference?",
      "time": "06:57",
      "timestamp": "1561384661.435300",
      "is_reply": false
    },
    {
      "sender": "dlluncor",
      "user_id": "U3UA06MFD",
      "message": "i stopped using the %s method, since I thought that was the “old-school” way of doing formatting. I remember reading how “{}” was preferred as a method to formatting instead of “%s” or “{0}“.\n\nHowever if it saves from the variable substitution happening that makes sense\n\nI’m OK with the approach you have mentioned, wasn’t aware of that standard",
      "time": "09:03",
      "timestamp": "1561392201.436600",
      "is_reply": true
    },
    {
      "sender": "lydia",
      "user_id": "UJK4LKYSJ",
      "message": "yes that's true for normal strings, but not for logging statements",
      "time": "09:35",
      "timestamp": "1561394153.436800",
      "is_reply": true
    },
    {
      "sender": "dlluncor",
      "user_id": "U3UA06MFD",
      "message": "sounds good",
      "time": "09:36",
      "timestamp": "1561394192.437000",
      "is_reply": true
    }
  ],
  "metadata": {
    "channel_id": "C06FA6A23",
    "channel_name": "discuss-engineering",
    "date_file": "2019-06-24.json",
    "message_count": 4,
    "start_time": "1561384661.435300",
    "end_time": "1561394192.437000",
    "is_thread": true
  }
}