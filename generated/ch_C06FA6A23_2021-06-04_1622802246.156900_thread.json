{
  "id": "ch_C06FA6A23_2021-06-04_1622802246.156900_thread",
  "type": "channel",
  "channel_name": "discuss-engineering",
  "conversation_type": "thread",
  "participants": [
    "Venkatesh",
    "Saikat",
    "Aimé",
    "Matt Weaver",
    "Seb"
  ],
  "messages": [
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "@Heymian :point_up:",
      "time": "03:24",
      "timestamp": "1622802246.156900",
      "is_reply": false
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Aimé can't they just download and create an encrypted zip?",
      "time": "04:41",
      "timestamp": "1622806882.157200",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "They were hoping for something less fiddly…",
      "time": "04:45",
      "timestamp": "1622807154.157400",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "hmm ^^ that would take like 2 min",
      "time": "04:50",
      "timestamp": "1622807400.157600",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "Ah ok. They cannot download locally. So they have to encrypt on platform",
      "time": "04:54",
      "timestamp": "1622807686.157800",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "They are asking if they can add a crypto python package to IB to encrypt on IB?",
      "time": "05:44",
      "timestamp": "1622810685.158000",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "We've just added an encryption library to app-tasks for hsbc\nhttps://instabase.slack.com/archives/C01N7DV1137/p1622753396294000?thread_ts=1622147134.203500&cid=C01N7DV1137",
      "time": "05:54",
      "timestamp": "1622811245.158200",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "this could work",
      "time": "05:54",
      "timestamp": "1622811248.158500",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "you can ask if they'd be happy using `gnupg`?  for encryption?",
      "time": "05:54",
      "timestamp": "1622811265.158700",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "will do",
      "time": "05:55",
      "timestamp": "1622811346.158900",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "OK they said this could work - are checking they can install on AWS as well",
      "time": "05:57",
      "timestamp": "1622811453.159100",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "ok",
      "time": "05:57",
      "timestamp": "1622811457.159300",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "so we will need to update app taksks?",
      "time": "05:57",
      "timestamp": "1622811460.159500",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "yep",
      "time": "05:57",
      "timestamp": "1622811464.159700",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "sweet. Thansk @Matt Weaver :ninja:",
      "time": "05:57",
      "timestamp": "1622811475.159900",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "What packages /libraries will AWS team need to install to enable this?",
      "time": "05:59",
      "timestamp": "1622811573.160100",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Aimé that depends which OS they are using. They should really know how to do this. as this isn't an Instabase feature, but a general and common library for encryption:\nhttps://gnupg.org/download/",
      "time": "07:11",
      "timestamp": "1622815872.160300",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Hey @Matt Weaver, for my own benefit and understanding, why would gnupg and py-gnupg be used instead of the standard cryptography python library?",
      "time": "08:11",
      "timestamp": "1622819486.160500",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Seb i'm not sure. I just know that we needed gnupg specifically for RSA signatures & encryption at HSBC, and figured we can use the same here.\n\nHappy to take your feedback id there is an easier way to do this for NatWest?\n\nCC @Saikat",
      "time": "08:13",
      "timestamp": "1622819606.160800",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "I’m asking because at eQ I used python to generate RSA keys pairs and cyphers to decrypt user db passwords, it must be a a developer preference",
      "time": "08:16",
      "timestamp": "1622819795.161000",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Just looking at my references, I used the following Crypto imports:\nimport base64\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.Signature import PKCS1_v1_5\nfrom Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5\nfrom Crypto import Random\nfrom base64 import b64encode, b64decode",
      "time": "08:21",
      "timestamp": "1622820087.161200",
      "is_reply": true
    },
    {
      "sender": "Saikat",
      "user_id": "U017S746NKV",
      "message": "@Seb You are right for simple encryption anything is fine. You can use any standard library or even your own predetermined algorithm to encode and decode.\n\nI think what @Matt Weaver is referring is to a specific use-case, where our client shared their public GPG key with us. We are encrypting our payload data using that public key and signing it using our private key. For decryption we do it accordingly.\nThey have this process documented.\n\nNote: This is on top of the standard TLS and Auth. This is an additional encryption to the payload which process is used and agreed upon by them.",
      "time": "08:22",
      "timestamp": "1622820156.161500",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "agreed by HSBC I understand, but is it specified by NatWest?",
      "time": "08:24",
      "timestamp": "1622820283.161700",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "For natwest we can potentially do this much simpler",
      "time": "08:25",
      "timestamp": "1622820302.161900",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "that’s my point",
      "time": "08:25",
      "timestamp": "1622820310.162100",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "why would request for a celery-app-task upgrade if you can use a standard python library to generate the public and private key to ecnrypt a zip file",
      "time": "08:26",
      "timestamp": "1622820365.162300",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Seb i was not aware of these standard python libraries :slightly_smiling_face:\n(you're talking to a recovering JavaScript developer here)",
      "time": "08:27",
      "timestamp": "1622820434.162500",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "is Crypto available in app-tasks?",
      "time": "08:27",
      "timestamp": "1622820450.162700",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "lets use it and keep this simple",
      "time": "08:27",
      "timestamp": "1622820457.162900",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Let me share a sample code I used this can be tested in a UDF I guess",
      "time": "08:28",
      "timestamp": "1622820483.163100",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "import base64\nfrom Crypto.PublicKey import RSA\n\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nfrom Crypto.Signature import PKCS1_v1_5\nfrom Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5\nfrom Crypto import Random\nfrom base64 import b64encode, b64decode\n\nhash = “SHA-256”\n\nclass rsa:\n    def newkeys(keysize):\n        random_generator = Random.new().read\n        key = RSA.generate(keysize, random_generator)\n        private, public = key, key.publickey()\n        return public, private\n\n    def importKey(externKey):\n        return RSA.importKey(externKey)\n\n    def getpublickey(priv_key):\n        return priv_key.publickey()\n\n    def encrypt(message, pub_key):\n        #RSA encryption protocol according to PKCS#1 OAEP\n        cipher = PKCS1_OAEP.new(pub_key)\n        return cipher.encrypt(message)\n\n    def decrypt(ciphertext, priv_key):\n        #RSA encryption protocol according to PKCS#1 OAEP\n        cipher = PKCS1_OAEP.new(priv_key)\n        return cipher.decrypt(ciphertext)\n\n    def sign(message, priv_key, hashAlg=“SHA-256\"):\n        global hash\n        hash = hashAlg\n        signer = PKCS1_v1_5.new(priv_key)\n        if (hash == “SHA-512”):\n            digest = SHA512.new()\n        elif (hash == “SHA-384\"):\n            digest = SHA384.new()\n        elif (hash == “SHA-256”):\n            digest = SHA256.new()\n        elif (hash == “SHA-1\"):\n            digest = SHA.new()\n        else:\n            digest = MD5.new()\n        digest.update(message)\n        return signer.sign(digest)\n\n    def verify(message, signature, pub_key):\n        signer = PKCS1_v1_5.new(pub_key)\n        if (hash == “SHA-512”):\n            digest = SHA512.new()\n        elif (hash == “SHA-384\"):\n            digest = SHA384.new()\n        elif (hash == “SHA-256”):\n            digest = SHA256.new()\n        elif (hash == “SHA-1\"):\n            digest = SHA.new()\n        else:\n            digest = MD5.new()\n        digest.update(message)\n        return signer.verify(digest, signature)\n\n\nfrom base64 import b64encode, b64decode\n\nmsg1 = b”Hello Tony, I am Jarvis!”\nmsg2 = b”Hello Toni, I am Jarvis!”\nkeysize = 2048\n(public, private) = rsa.newkeys(keysize)\n\nencrypted = b64encode(rsa.encrypt(msg1, public))\ndecrypted = rsa.decrypt(b64decode(encrypted), private)\nsignature = b64encode(rsa.sign(msg1, private, “SHA-512”))\nverify = rsa.verify(msg1, b64decode(signature), public)\n\nprint(private.exportKey(‘PEM’))\nprint(public.exportKey(‘PEM’))\nprint(“Encrypted: ” + encrypted.decode())\nprint(“Decrypted: ‘%s’” % decrypted)\nprint(“Signature: ” + signature.decode())\nprint(“Verify: %s” % verify)\nrsa.verify(msg2, b64decode(signature), public)",
      "time": "08:28",
      "timestamp": "1622820495.163300",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "the rsa class provides pretty much all you need for RSA",
      "time": "08:29",
      "timestamp": "1622820556.163500",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Alternate Reference for *RSA Key generation:*\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_OAEP\nimport binascii\n\nkeyPair = RSA.generate(3072)\n\npubKey = keyPair.publickey()\nprint(f”Public key:  (n={hex(pubKey.n)}, e={hex(pubKey.e)})“)\npubKeyPEM = pubKey.exportKey()\nprint(pubKeyPEM.decode(‘ascii’))\n\nprint(f”Private key: (n={hex(pubKey.n)}, d={hex(keyPair.d)})“)\nprivKeyPEM = keyPair.exportKey()\nprint(privKeyPEM.decode(‘ascii’))",
      "time": "08:32",
      "timestamp": "1622820760.163700",
      "is_reply": true
    },
    {
      "sender": "Aimé",
      "user_id": "U01JWKF4AEP",
      "message": "Please let me know what our final recommendation should be to NatWest :slightly_smiling_face:",
      "time": "08:33",
      "timestamp": "1622820789.163900",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "*For RSA Encryption:*\nmsg = b’A message for encryption’\nencryptor = PKCS1_OAEP.new(pubKey)\nencrypted = encryptor.encrypt(msg)\nprint(“Encrypted:“, binascii.hexlify(encrypted))\n*For RSA Decryption:*\ndecryptor = PKCS1_OAEP.new(keyPair)\ndecrypted = decryptor.decrypt(encrypted)\nprint(‘Decrypted:’, decrypted)",
      "time": "08:34",
      "timestamp": "1622820846.164100",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Seb @Venkatesh Can you put together a test UDF that reads a file from the IB filesystem and RSA encrypts it?\n\nIf that works with standard python libraries, we can make a recommendation and write a short doc to send to natwest.",
      "time": "08:35",
      "timestamp": "1622820934.164300",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "I depends on what’s possible with the current dev env at NatWest, the above can be tested to confirm that the standard lib is there. Then it is a question of creating a zip file and streaming its bytes through the cypher",
      "time": "08:35",
      "timestamp": "1622820955.164500",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Seb assume NatWest dev has the same app-tasks python libraries as ib.com (http://ib.com) right now. Can you put this test script together?",
      "time": "08:36",
      "timestamp": "1622820994.164700",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Yes, I’ll logon assuming they have fixed my AD credentials",
      "time": "08:37",
      "timestamp": "1622821054.165000",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "sure, but you can also test this on ib.com (http://ib.com). Doesn't need ot be on the natwest env",
      "time": "08:37",
      "timestamp": "1622821075.165200",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "I’ll come back to you",
      "time": "08:37",
      "timestamp": "1622821075.165300",
      "is_reply": true
    },
    {
      "sender": "Venkatesh",
      "user_id": "U0134C9PPEF",
      "message": "Hi @Seb . Please let me know if you need to test your scripts in the Natwest env. I have a working login. I can help you with that.",
      "time": "08:38",
      "timestamp": "1622821096.165600",
      "is_reply": true
    },
    {
      "sender": "Saikat",
      "user_id": "U017S746NKV",
      "message": "> is Crypto available in app-tasks?\nTo answer @Matt Weaver - I doubt it is. I got an error when tried importing it.",
      "time": "08:38",
      "timestamp": "1622821139.165800",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "ok Venkat, please go ahead, you’ll be faster than me.",
      "time": "08:39",
      "timestamp": "1622821159.166000",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Let me try something, on the citrix standalone jupyter notebook at NatWest",
      "time": "08:40",
      "timestamp": "1622821258.166200",
      "is_reply": true
    },
    {
      "sender": "Matt Weaver",
      "user_id": "U01B8GFNUAC",
      "message": "@Seb jupyter notebooks may not have the same libs as Instabase app-tasks pods. This needs to be tested on IB (dogfood, ib.com (http://ib.com) or natwest) i think",
      "time": "08:41",
      "timestamp": "1622821306.166400",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Ok, an update, the Crypto module is not installed by default. But Venkat and I tested the rsa keys generation, with a simple encrypt and decrypt test and it seems to work with the default cryptography module. Just need to confirm this within a UDF. to come shortly",
      "time": "09:38",
      "timestamp": "1622824731.166900",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "Ok, it’s working on IB.com (http://IB.com) from refiner, Venkat is now testing it on the NatWest platform and will confirm shortly",
      "time": "10:00",
      "timestamp": "1622826015.167300",
      "is_reply": true
    },
    {
      "sender": "Venkatesh",
      "user_id": "U0134C9PPEF",
      "message": "Working on Natwest env",
      "time": "10:05",
      "timestamp": "1622826346.167500",
      "is_reply": true
    },
    {
      "sender": "Seb",
      "user_id": "U01T2LEKKB7",
      "message": "So in summary, a key gen, message encrypt and decrypt using RSA keys were possible on IB at NatWest from a UDF(using the default cryptography python lib). But that remains to do is to write a UDF to load the NatWest public key and encrypt the files with rsa_encrypt and decrypt them on AWS using the private key and  rsa_decrypt method.",
      "time": "10:11",
      "timestamp": "1622826704.167800",
      "is_reply": true
    }
  ],
  "metadata": {
    "channel_id": "C06FA6A23",
    "channel_name": "discuss-engineering",
    "date_file": "2021-06-04.json",
    "message_count": 50,
    "start_time": "1622802246.156900",
    "end_time": "1622826704.167800",
    "is_thread": true
  }
}