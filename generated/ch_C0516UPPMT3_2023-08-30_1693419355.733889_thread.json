{
  "id": "ch_C0516UPPMT3_2023-08-30_1693419355.733889_thread",
  "type": "channel",
  "channel_name": "aihub-feedback",
  "conversation_type": "thread",
  "participants": [
    "Dan H"
  ],
  "messages": [
    {
      "sender": "Dan H",
      "user_id": "U020E9AS9P0",
      "message": "Hey Team -\n\nI am trying to use `call_model_converse` to generate some JSONs so that I can use it to categorize data in a table.  I am getting this error on certain documents (but not others):\n```Error: Exception Invalid query, got errors: [{'locations': [{'column': 649, 'line': 1}], 'message': 'Syntax Error GraphQL request (1:649) Invalid character escape sequence: \\\\\\\\(.\\n\\n1: {Get{GPT_run_flow_82571eb20bd39d1f(where: {path: [\"ref_doc_id\"] operator: Equal valueString: \"intact-workshop/Demo_Workspace/fs/Instabase Drive/.instabase_projects/Demo New Account Submission/latest/documents/files/processed/original/Specialty Property SOV Example - MRK Partners Inc - All Risk Submission 5-31-23 _please confirm clearance__MRK Partners Inc Pivot Table SOV 6.6.23.xlsx.ibdoc\"} limit: 2 bm25:{query: \"give the following example mapping json create a new json which map the newly provide value to one of the unique key value from the orignal json mapping = Frame frame Frame with paint stucco facade frame ISO 1 frame Heavy Timber \\\\(ht\\\\ frame Frame Reinforced Concrete Frame \\\\(iso 1 ISO 6\\\\ frame wood frame Frame \\\\(iso Class Code 1\\\\ frame 1 frame JM jm Joisted Masonry jm joisted masonry with paint stucco facade jm ISO 2 jm ISO 2 Joisted Masonry jm Combustible \\\\(\"c\\\\ jm Masonry jm Joisted Masonry \\\\(iso Class Code 2\\\\ jm 2 jm NC NC NonCombustible NC ISO 3 NC Non Combustible \\\\(NC\\\\ NC tilt up NC reinforce Concrete NC Metal \\\\(iso Class Code 3\\\\ NC 3 NC MNC MNC Masonry NonCombustible MNC reinforce concrete structural steel with masonry and concrete encasement paint stucco exterior MNC ISO 4 MNC protect Steel \\\\(ps\\\\ MNC Light Metal MNC Steel Frame MNC Masonry Non combustible \\\\(iso Class Code 4\\\\ MNC 4 MNC MFR MFR Modified Fire Resistive MFR ISO 5 MFR Combustible Metal Deck \\\\(CMD\\\\ MFR Manufactured MFR 5 MFR FR FR Fire Resistive FR ISO 6 Modified Fire Resistive FR ISO 6 FR Modified Fire Restistive FR Fire Resistive \\\\(fr\\\\ FR reinforce Concrete Frame \\\\(iso 6\\\\ FR Fire Resistive \\\\(iso Class Code 6\\\\ FR 6 FR unique_input = ISO 6 Modified Fire Resistive joisted masonry with paint stucco façade ISO 2 Joisted Masonry Frame with paint stucco façade reinforce concrete structural steel with masonry and concrete encasement paint stucco exterior Concrete Masonry Unit Reinforced Concrete Concrete masonry unit load bear wall reinforce concrete upper floor paint stucco façade Concrete masonry unit load bear wall paint stucco façade Frame with brick masonry façade Masonry with paint stucco façade Masonry Class C Construction Type II a Protected Non Combustible Frame with paint fiber cement lap siding concrete column concrete masonry unit load bear wall precast concrete plank and floor brick masonry and paint concrete façade Fra Masonry Frame return only the json with no support text or formatting\"}){text tokenized_text doc_id project_id node_index ref_doc_id node_info _additional {id score vector }}}}\\n ^\\n', 'path': None}]```\nMy querry has a ton of escape characters (required by refiner for strings):\n```Given the following example mapping JSON, create a new JSON which maps the newly provided values to one of the unique keys values from the orignal JSON: mapping = { 'Frame': 'Frame', 'Frame with painted stucco facade': 'Frame', 'ISO 1': 'Frame', 'Heavy Timber \\(HT\\)': 'Frame', 'Frame/Reinforced Concrete Frame \\(ISO 1/ISO 6\\)': 'Frame', 'Wood': 'Frame', 'Frame \\(ISO Class Code 1\\)': 'Frame', '1': 'Frame', 'JM': 'JM', 'Joisted Masonry': 'JM', 'Joisted masonry with painted stucco facade': 'JM', 'ISO 2': 'JM', 'ISO 2-Joisted Masonry': 'JM', 'Combustible \\(\"C\\)': 'JM', 'Masonry': 'JM', 'Joisted Masonry \\(ISO Class Code 2\\)': 'JM', '2': 'JM', 'NC': 'NC', 'NonCombustible': 'NC', 'ISO 3': 'NC', 'Non-Combustible \\(NC\\)': 'NC', 'Tilt-up': 'NC', 'Reinforced Concrete': 'NC', 'Metal \\(ISO Class Code 3\\)': 'NC', '3': 'NC', 'MNC': 'MNC', 'Masonry NonCombustible': 'MNC', 'Reinforce concrete, structural steel with masonry and concrete encasement, painted stucco exterior': 'MNC', 'ISO 4': 'MNC', 'Protected Steel \\(PS\\)': 'MNC', 'Light Metal': 'MNC', 'Steel Frame': 'MNC', 'Masonry Non-Combustible \\(ISO Class Code 4\\)': 'MNC', '4': 'MNC', 'MFR': 'MFR', 'Modified Fire Resistive': 'MFR', 'ISO 5': 'MFR', 'Combustible Metal Deck \\(CMD\\)': 'MFR', 'Manufactured': 'MFR', '5': 'MFR', 'FR': 'FR', 'Fire Resistive': 'FR', 'ISO 6-Modified Fire Resistive': 'FR', 'ISO 6': 'FR', 'Modified Fire Restistive': 'FR', 'Fire Resistive \\(FR\\)': 'FR', 'Reinforced Concrete Frame \\(ISO 6\\)': 'FR', 'Fire Resistive \\(ISO Class Code 6\\)': 'FR', '6': 'FR' } unique_inputs = [''] return only the JSON with no supporting text or formatting.```",
      "time": "11:15",
      "timestamp": "1693419355.733889",
      "is_reply": false
    },
    {
      "sender": "Dan H",
      "user_id": "U020E9AS9P0",
      "message": "Looks like we are applying escape characters and cleaning when processing the text from the converse app.  Since we arent getting free text (in refiner, everything _must_ be escaped already) is there any way to circumvent that step?",
      "time": "12:56",
      "timestamp": "1693425409.646769",
      "is_reply": true
    }
  ],
  "metadata": {
    "channel_id": "C0516UPPMT3",
    "channel_name": "aihub-feedback",
    "date_file": "2023-08-30.json",
    "message_count": 2,
    "start_time": "1693419355.733889",
    "end_time": "1693425409.646769",
    "is_thread": true
  }
}